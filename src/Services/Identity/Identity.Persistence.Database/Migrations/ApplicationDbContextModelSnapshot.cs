// <auto-generated />
using System;
using Identity.Persistence.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Identity.Persistence.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("User")
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Identity.Domain.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("EmailVerification")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdRole")
                        .HasColumnType("int");

                    b.Property<int>("IdStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("SignUpDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdRole");

                    b.HasIndex("IdStatus");

                    b.HasIndex(new[] { "Email" }, "UQ__Email__6B0F5AE070734E4D")
                        .IsUnique();

                    b.ToTable("User", "User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Answer = "asd",
                            Email = "nico.d.rodriguez@hotmail.com",
                            EmailVerification = true,
                            FirstName = "Nicolás D.",
                            IdRole = 1,
                            IdStatus = 1,
                            LastName = "Rodríguez",
                            Password = "ef797c8118f02dfb649607dd5d3f8c7623048c9c063d532cc95c5ed7a898a64f",
                            Phone = "1122223333",
                            Question = "asd",
                            SignUpDate = new DateTime(2023, 8, 3, 18, 46, 30, 683, DateTimeKind.Local).AddTicks(9999)
                        });
                });

            modelBuilder.Entity("Identity.Domain.ApplicationUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRole", "User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Full access",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Basic operations access",
                            Name = "Basic"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Limited access",
                            Name = "Visit"
                        });
                });

            modelBuilder.Entity("Identity.Domain.ApplicationUserStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserStatus", "User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Inactive"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            Name = "PendingSend"
                        },
                        new
                        {
                            Id = 5,
                            Name = "PendingConfirmation"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Rejected"
                        });
                });

            modelBuilder.Entity("Identity.Domain.ApplicationUser", b =>
                {
                    b.HasOne("Identity.Domain.ApplicationUserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("IdRole")
                        .IsRequired();

                    b.HasOne("Identity.Domain.ApplicationUserStatus", "Status")
                        .WithMany("Users")
                        .HasForeignKey("IdStatus")
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Identity.Domain.ApplicationUserRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Identity.Domain.ApplicationUserStatus", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
